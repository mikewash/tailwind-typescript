"use client"
import React, { useState, useCallback, useRef } from 'react';
import { createPortal } from 'react-dom';
import { useRouter } from 'next/router.js';
import Link from 'next/link.js';
import Head from 'next/head.js';
import { useDocSearchKeyboardEvents } from '@docsearch/react';
import { jsxs, jsx } from 'react/jsx-runtime';

// src/search/Algolia.tsx
var DocSearchModal = null;
var CustomLink = ({
  href,
  ...rest
}) => {
  const isInternalLink = href && href.startsWith("/");
  const isAnchorLink = href && href.startsWith("#");
  if (isInternalLink) {
    return /* @__PURE__ */ jsx(Link, {
      href,
      children: /* @__PURE__ */ jsx("a", {
        ...rest
      })
    });
  }
  if (isAnchorLink) {
    return /* @__PURE__ */ jsx("a", {
      href,
      ...rest
    });
  }
  return /* @__PURE__ */ jsx("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href,
    ...rest
  });
};
function Hit({
  hit,
  children
}) {
  return /* @__PURE__ */ jsx(CustomLink, {
    href: hit.url,
    children
  });
}
var AlgoliaSearchContext = React.createContext(
  {}
);
var AlgoliaSearchProvider = (props) => {
  const { algoliaConfig } = props;
  const router = useRouter();
  const [isOpen, setIsOpen] = useState(false);
  const [initialQuery, setInitialQuery] = useState(void 0);
  const importDocSearchModalIfNeeded = useCallback(() => {
    if (DocSearchModal) {
      return Promise.resolve();
    }
    return Promise.all([
      import('./AlgoliaModal.js')
    ]).then(([{ DocSearchModal: Modal }]) => {
      DocSearchModal = Modal;
    });
  }, []);
  const onOpen = useCallback(() => {
    importDocSearchModalIfNeeded().then(() => {
      setIsOpen(true);
    });
  }, [importDocSearchModalIfNeeded, setIsOpen]);
  const onClose = useCallback(() => {
    setIsOpen(false);
  }, [setIsOpen]);
  const onInput = useCallback(
    (event) => {
      importDocSearchModalIfNeeded().then(() => {
        setIsOpen(true);
        setInitialQuery(event.key);
      });
    },
    [importDocSearchModalIfNeeded, setIsOpen, setInitialQuery]
  );
  const navigator = useRef({
    navigate({ itemUrl }) {
      const isInternalLink = itemUrl.startsWith("/");
      const isAnchorLink = itemUrl.startsWith("#");
      if (!isInternalLink && !isAnchorLink) {
        window.location.href = itemUrl;
      } else {
        router.push(itemUrl);
      }
    }
  }).current;
  const transformItems = useRef(
    (items) => items.map((item) => {
      const isInternalLink = item.url.startsWith("/");
      const isAnchorLink = item.url.startsWith("#");
      if (!isInternalLink && !isAnchorLink) {
        return item;
      }
      const url = new URL(item.url);
      return {
        ...item,
        url: `${url.pathname}${url.hash}`
      };
    })
  ).current;
  useDocSearchKeyboardEvents({
    isOpen,
    onOpen,
    onClose,
    onInput
  });
  return /* @__PURE__ */ jsxs(AlgoliaSearchContext.Provider, {
    value: { query: { setSearch: setInitialQuery, toggle: onOpen } },
    children: [
      /* @__PURE__ */ jsx(Head, {
        children: /* @__PURE__ */ jsx("link", {
          rel: "preconnect",
          href: `https://${algoliaConfig.appId}-dsn.algolia.net`,
          crossOrigin: "anonymous"
        })
      }),
      props.children,
      isOpen && DocSearchModal && createPortal(
        /* @__PURE__ */ jsx(DocSearchModal, {
          onClose,
          initialScrollY: window.scrollY,
          initialQuery,
          navigator,
          transformItems,
          hitComponent: Hit,
          ...algoliaConfig
        }),
        document.body
      )
    ]
  });
};

export { AlgoliaSearchContext, AlgoliaSearchProvider };
