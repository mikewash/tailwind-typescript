"use client"
import { useState, useCallback, useEffect } from 'react';
import Router from 'next/router.js';
import { jsx, Fragment } from 'react/jsx-runtime';

// src/search/KBar.tsx
var KBarModal = null;
var KBarSearchProvider = ({ kbarConfig, children }) => {
  const { searchDocumentsPath, defaultActions } = kbarConfig;
  const [loaded, setLoaded] = useState(false);
  const importDocSearchModalIfNeeded = useCallback(() => {
    if (KBarModal) {
      return Promise.resolve();
    }
    return Promise.all([import('./KBarModal.js')]).then(([{ KBarModal: Modal }]) => {
      KBarModal = Modal;
    });
  }, []);
  useEffect(() => {
    const handleKeyDown = (event) => {
      if (event.ctrlKey && event.key === "k") {
        event.preventDefault();
        importDocSearchModalIfNeeded().then(() => {
          setLoaded(true);
          window.removeEventListener("keydown", handleKeyDown);
        });
      }
    };
    if (!loaded)
      window.addEventListener("keydown", handleKeyDown);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [importDocSearchModalIfNeeded, loaded]);
  const startingActions = Array.isArray(defaultActions) ? defaultActions : [
    {
      id: "homepage",
      name: "Homepage",
      keywords: "",
      section: "Home",
      perform: () => Router.push("/")
    }
  ];
  return /* @__PURE__ */ jsx(Fragment, {
    children: loaded && KBarModal ? /* @__PURE__ */ jsx(KBarModal, {
      startingActions,
      searchDocumentsPath,
      children
    }) : children
  });
};

export { KBarSearchProvider };
