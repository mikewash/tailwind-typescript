import { convertkitHandler } from './chunk-HLVJ5XV4.js';
import { emailOctopusHandler } from './chunk-7ZUHYN54.js';
import { klaviyoHandler } from './chunk-ZNT4PKCK.js';
import { mailchimpHandler } from './chunk-YYJJLERZ.js';
import { revueHandler } from './chunk-VY2TONDA.js';
import { buttondownHandler } from './chunk-EHD6RPVV.js';

// src/newsletter/index.ts
async function NewsletterHandler(req, res, options) {
  const { email } = req.body;
  if (!email) {
    return res.status(400).json({ error: "Email is required" });
  }
  try {
    let response;
    switch (options.provider) {
      case "buttondown":
        response = await buttondownHandler(req, res);
        break;
      case "convertkit":
        response = await convertkitHandler(req, res);
        break;
      case "mailchimp":
        response = await mailchimpHandler(req, res);
        break;
      case "klaviyo":
        response = await klaviyoHandler(req, res);
        break;
      case "revue":
        response = await revueHandler(req, res);
        break;
      case "emailoctopus":
        response = await emailOctopusHandler(req, res);
        break;
      default:
        res.status(500).json({ error: `${options.provider} not supported` });
    }
    if (response.status >= 400) {
      res.status(response.status).json({ error: `There was an error subscribing to the list.` });
    }
    res.status(201).json({ error: "" });
  } catch (error) {
    res.status(500).json({ error: error.message || error.toString() });
  }
}
function NewsletterAPI(...args) {
  if (args.length === 1) {
    return async (req, res) => await NewsletterHandler(req, res, args[0]);
  }
  return NewsletterHandler(args[0], args[1], args[2]);
}

export { NewsletterAPI };
