import Head from 'next/head.js';
import { useRouter } from 'next/router.js';
import { jsx, jsxs, Fragment } from 'react/jsx-runtime';

// src/seo.tsx
var CommonSEO = ({
  title,
  description,
  config,
  ogType,
  ogImage,
  twImage,
  canonicalUrl
}) => {
  const router = useRouter();
  return /* @__PURE__ */ jsxs(Head, {
    children: [
      /* @__PURE__ */ jsx("title", {
        children: title
      }),
      /* @__PURE__ */ jsx("meta", {
        name: "robots",
        content: "follow, index"
      }),
      /* @__PURE__ */ jsx("meta", {
        name: "description",
        content: description
      }),
      /* @__PURE__ */ jsx("meta", {
        property: "og:url",
        content: `${config.siteUrl}${router.asPath}`
      }),
      /* @__PURE__ */ jsx("meta", {
        property: "og:type",
        content: ogType
      }),
      /* @__PURE__ */ jsx("meta", {
        property: "og:site_name",
        content: config.title
      }),
      /* @__PURE__ */ jsx("meta", {
        property: "og:description",
        content: description
      }),
      /* @__PURE__ */ jsx("meta", {
        property: "og:title",
        content: title
      }),
      Array.isArray(ogImage) ? ogImage.map(({ url }) => /* @__PURE__ */ jsx("meta", {
        property: "og:image",
        content: url
      }, url)) : /* @__PURE__ */ jsx("meta", {
        property: "og:image",
        content: ogImage
      }, ogImage),
      /* @__PURE__ */ jsx("meta", {
        name: "twitter:card",
        content: "summary_large_image"
      }),
      config.twitter && /* @__PURE__ */ jsx("meta", {
        name: "twitter:site",
        content: config.twitter
      }),
      /* @__PURE__ */ jsx("meta", {
        name: "twitter:title",
        content: title
      }),
      /* @__PURE__ */ jsx("meta", {
        name: "twitter:description",
        content: description
      }),
      /* @__PURE__ */ jsx("meta", {
        name: "twitter:image",
        content: twImage
      }),
      /* @__PURE__ */ jsx("link", {
        rel: "canonical",
        href: canonicalUrl ? canonicalUrl : `${config.siteUrl}${router.asPath}`
      })
    ]
  });
};
var PageSEO = ({ title, description, config }) => {
  const ogImageUrl = config.siteUrl + config.socialBanner;
  const twImageUrl = config.siteUrl + config.socialBanner;
  return /* @__PURE__ */ jsx(CommonSEO, {
    title,
    description,
    config,
    ogType: "website",
    ogImage: ogImageUrl,
    twImage: twImageUrl
  });
};
var TagSEO = ({ title, description, config }) => {
  const ogImageUrl = config.siteUrl + config.socialBanner;
  const twImageUrl = config.siteUrl + config.socialBanner;
  const router = useRouter();
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(CommonSEO, {
        title,
        description,
        config,
        ogType: "website",
        ogImage: ogImageUrl,
        twImage: twImageUrl
      }),
      /* @__PURE__ */ jsx(Head, {
        children: /* @__PURE__ */ jsx("link", {
          rel: "alternate",
          type: "application/rss+xml",
          title: `${description} - RSS feed`,
          href: `${config.siteUrl}${router.asPath}/feed.xml`
        })
      })
    ]
  });
};
var BlogSEO = ({
  authorDetails,
  title,
  summary,
  date,
  lastmod,
  url,
  config,
  images = [],
  canonicalUrl
}) => {
  const publishedAt = new Date(date).toISOString();
  const modifiedAt = new Date(lastmod || date).toISOString();
  const imagesArr = images.length === 0 ? [config.socialBanner] : typeof images === "string" ? [images] : images;
  const featuredImages = imagesArr.map((img) => {
    return {
      "@type": "ImageObject",
      url: `${config.siteUrl}${img}`
    };
  });
  let authorList;
  if (authorDetails) {
    authorList = authorDetails.map((author) => {
      return {
        "@type": "Person",
        name: author.name
      };
    });
  } else {
    authorList = {
      "@type": "Person",
      name: config.author
    };
  }
  const structuredData = {
    "@context": "https://schema.org",
    "@type": "Article",
    mainEntityOfPage: {
      "@type": "WebPage",
      "@id": url
    },
    headline: title,
    image: featuredImages,
    datePublished: publishedAt,
    dateModified: modifiedAt,
    author: authorList,
    publisher: {
      "@type": "Organization",
      name: config.author,
      logo: {
        "@type": "ImageObject",
        url: `${config.siteUrl}${config.siteLogo}`
      }
    },
    description: summary
  };
  const twImageUrl = featuredImages[0].url;
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(CommonSEO, {
        title,
        description: summary,
        config,
        ogType: "article",
        ogImage: featuredImages,
        twImage: twImageUrl,
        canonicalUrl
      }),
      /* @__PURE__ */ jsxs(Head, {
        children: [
          date && /* @__PURE__ */ jsx("meta", {
            property: "article:published_time",
            content: publishedAt
          }),
          lastmod && /* @__PURE__ */ jsx("meta", {
            property: "article:modified_time",
            content: modifiedAt
          }),
          /* @__PURE__ */ jsx("script", {
            type: "application/ld+json",
            dangerouslySetInnerHTML: {
              __html: JSON.stringify(structuredData, null, 2)
            }
          })
        ]
      })
    ]
  });
};

export { BlogSEO, PageSEO, TagSEO };
