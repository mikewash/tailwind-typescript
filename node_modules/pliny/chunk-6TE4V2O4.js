import GithubSlugger from 'github-slugger';

// src/utils/contentlayer.ts
function dateSortDesc(a, b) {
  if (a > b)
    return -1;
  if (a < b)
    return 1;
  return 0;
}
function sortedBlogPost(allBlogs) {
  return allBlogs.sort((a, b) => dateSortDesc(a.date, b.date));
}
var pick = (obj, keys) => {
  return keys.reduce((acc, key) => {
    acc[key] = obj[key] ?? null;
    return acc;
  }, {});
};
var omit = (obj, keys) => {
  const result = Object.assign({}, obj);
  keys.forEach((key) => {
    delete result[key];
  });
  return result;
};
function coreContent(content) {
  return omit(content, ["body", "_raw", "_id"]);
}
function allCoreContent(contents) {
  return contents.map((c) => coreContent(c)).filter((c) => !("draft" in c && c.draft === true));
}
async function getAllTags(allBlogs) {
  const tagCount = {};
  allBlogs.forEach((file) => {
    if (file.tags && file.draft !== true) {
      file.tags.forEach((tag) => {
        const formattedTag = GithubSlugger.slug(tag);
        if (formattedTag in tagCount) {
          tagCount[formattedTag] += 1;
        } else {
          tagCount[formattedTag] = 1;
        }
      });
    }
  });
  return tagCount;
}

export { allCoreContent, coreContent, dateSortDesc, getAllTags, omit, pick, sortedBlogPost };
