import dynamic from 'next/dynamic.js';
import { jsx, Fragment } from 'react/jsx-runtime';

// src/search/index.tsx
var AlgoliaSearchProvider = dynamic(
  () => {
    return import('./search/Algolia.js').then((mod) => mod.AlgoliaSearchProvider);
  },
  { ssr: false }
);
var KBarSearchProvider = dynamic(
  () => {
    return import('./search/KBar.js').then((mod) => mod.KBarSearchProvider);
  },
  { ssr: false }
);
var KBarContext = dynamic(
  () => {
    return import('kbar').then((mod) => mod.KBarContext);
  },
  { ssr: false }
);
var AlgoliaSearchContext = dynamic(
  () => {
    return import('./search/Algolia.js').then((mod) => mod.AlgoliaSearchContext);
  },
  { ssr: false }
);
var SearchProvider = ({ searchConfig, children }) => {
  if (searchConfig && searchConfig.provider) {
    switch (searchConfig.provider) {
      case "algolia":
        return /* @__PURE__ */ jsx(AlgoliaSearchProvider, {
          algoliaConfig: searchConfig.algoliaConfig,
          children
        });
      case "kbar":
        return /* @__PURE__ */ jsx(KBarSearchProvider, {
          kbarConfig: searchConfig.kbarConfig,
          children
        });
      default:
        console.log("No suitable provider found. Please choose from algolia or kbar.");
        return /* @__PURE__ */ jsx(Fragment, {
          children
        });
    }
  } else {
    return /* @__PURE__ */ jsx(Fragment, {
      children
    });
  }
};
var SearchContext = (provider) => {
  switch (provider) {
    case "algolia":
      return AlgoliaSearchContext;
    case "kbar":
      return KBarContext;
  }
};

export { SearchContext, SearchProvider };
